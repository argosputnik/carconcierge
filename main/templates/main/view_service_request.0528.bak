{% extends 'main/base.html' %}
{% load static %}

{% block title %}Service Request #{{ service_request.id }}{% endblock %}

{% block content %}
<div class="main-content main-padded-top">
  <div class="container">
    <h2 class="mb-4 text-center">Service Request Details</h2>

    <div class="d-flex justify-content-center gap-3 mb-4">
      {% include 'main/_dashboard_buttons.html' %}
    </div>

    <div class="card mb-4">
      <div class="card-header">Request Information</div>
      <div class="card-body">
        <dl class="row">
          <dt class="col-sm-3">Request ID</dt>
          <dd class="col-sm-9">{{ service_request.id }}</dd>

          <dt class="col-sm-3">Requested At</dt>
          <dd class="col-sm-9">{{ service_request.requested_at|date:"Y-m-d H:i" }}</dd>

          <dt class="col-sm-3">Pickup Location</dt>
          <dd class="col-sm-9" style="white-space: pre-line;">{{ service_request.pickup_location }}</dd>

          <dt class="col-sm-3">Dropoff Location</dt>
          <dd class="col-sm-9" style="white-space: pre-line;">{{ service_request.dropoff_location }}</dd>

          <dt class="col-sm-3">Status</dt>
          <dd class="col-sm-9">{{ service_request.status }}</dd>

          <dt class="col-sm-3">Assigned To</dt>
          <dd class="col-sm-9">
            {% if service_request.assigned_to %}
              {{ service_request.assigned_to.get_full_name|default:"Assigned User" }}
            {% else %}
              <em>Unassigned</em>
            {% endif %}
          </dd>

          {% if service_request.description %}
            <dt class="col-sm-3">Description</dt>
            <dd class="col-sm-9">{{ service_request.description }}</dd>
          {% endif %}
        </dl>
      </div>
    </div>

    <div class="card mb-4">
      <div class="card-header">Location Map</div>
      <div class="card-body">
        <div
          id="map"
          style="height: 400px;"
          data-pickup="{{ service_request.pickup_location|escapejs }}"
          data-location-api-url="{{ location_api_url|default:'' }}"
          data-assigned-to-name="{{ service_request.assigned_to.get_full_name|default:'Concierge'|escapejs }}">
	{% if dealer_address %}
    	data-dealer-address="{{ dealer_address|escapejs }}"
     	data-dealer-name="{{ dealer_name|escapejs }}"
  	 {% endif %}
	</div>
        <div id="map-message" class="alert alert-info mt-2" style="display:none;">Finding location...</div>
      </div>
    </div>

    <div class="mt-4 text-center">
      {% if request.user.role == 'customer' %}
        <a href="{% url 'customer_dashboard' %}" class="btn btn-secondary me-2">← Back to Dashboard</a>
      {% elif request.user.role == 'concierge' %}
        <a href="{% url 'concierge_dashboard' %}" class="btn btn-secondary me-2">← Back to Dashboard</a>
      {% elif request.user.role == 'dealer' %}
        <a href="{% url 'dealer_dashboard' %}" class="btn btn-secondary me-2">← Back to Dashboard</a>
      {% elif request.user.role == 'owner' %}
        <a href="{% url 'owner_dashboard' %}" class="btn btn-secondary me-2">← Back to Dashboard</a>
      {% else %}
        <a href="{% url 'home' %}" class="btn btn-secondary me-2">← Back</a>
      {% endif %}

      {% if can_edit %}
        <a href="{% url 'edit_service_request' service_request.id %}" class="btn btn-primary">Edit</a>
      {% endif %}
    </div>
  </div>
</div>
{% endblock %}

<script>
document.addEventListener("DOMContentLoaded", function() {
  const mapEl = document.getElementById("map");
  if (!mapEl) {
      console.error("Map element not found!");
      return;
  }
  const map = L.map("map").setView([0, 0], 2);
  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution: "© OpenStreetMap contributors"
  }).addTo(map);

  let pickupMarker = null;
  let conciergeMarker = null;
  let dealerMarker = null; // --- Dealer marker variable ---
  const messageEl = document.getElementById("map-message");

  // Get data attributes
  const pickupAddress = mapEl.dataset.pickup;
  const locationApiUrl = mapEl.dataset.locationApiUrl;
  const assignedToName = mapEl.dataset.assignedToName;
  // --- Dealer data attributes ---
  const dealerAddress = mapEl.dataset.dealerAddress;
  const dealerName = mapEl.dataset.dealerName;

  function updateMapMessage(text, type = 'info') {
      if (messageEl) {
          messageEl.textContent = text;
          messageEl.className = `alert alert-${type} mt-2`;
          messageEl.style.display = text ? 'block' : 'none';
      }
  }

  function formatAddress(address) {
    return String(address || "")
      .replace(/\\u000A/g, ', ')
      .split('\n')
      .map(line => line.trim())
      .filter(line => line)
      .join(', ');
  }

  // --- Updated: Fit map to all markers ---
  function fitMapToMarkers() {
      const markers = [pickupMarker, conciergeMarker, dealerMarker].filter(Boolean);
      if (markers.length > 1) {
          const group = new L.featureGroup(markers);
          map.fitBounds(group.getBounds(), { padding: [50, 50] });
      } else if (markers.length === 1) {
          map.setView(markers[0].getLatLng(), 16);
      }
  }

  function geocodeAndDisplayPickupLocation(address) {
      const addressStr = String(address || "").trim();
      if (!addressStr) {
          console.warn("No pickup address provided for map.");
          updateMapMessage("Pickup address not available.", "warning");
          map.setView([41.7151, 44.8271], 12);
          return;
      }

      updateMapMessage("Finding pickup location...", "info");
      const geocodingAddress = formatAddress(addressStr);
      fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(geocodingAddress)}&limit=1`)
        .then(response => {
          if (!response.ok) {
            throw new Error(`Geocoding HTTP error! Status: ${response.status} for address: ${geocodingAddress}`);
          }
          return response.json();
        })
        .then(data => {
          if (data && data.length > 0) {
            const lat = parseFloat(data[0].lat);
            const lon = parseFloat(data[0].lon);

            if (!isNaN(lat) && !isNaN(lon)) {
              if (pickupMarker) {
                  map.removeLayer(pickupMarker);
              }
              pickupMarker = L.marker([lat, lon])
                .addTo(map)
                .bindPopup(`<b>Pickup:</b><br>${addressStr.replace(/\\u000A/g, '<br>')}`);
              updateMapMessage("", "info");
              fitMapToMarkers();
            } else {
              throw new Error("Invalid coordinates received.");
            }
          } else {
            updateMapMessage(`Could not find pickup location for: "${geocodingAddress}". Please verify the address format.`, "warning");
            map.setView([41.7151, 44.8271], 12);
          }
        })
        .catch(error => {
          updateMapMessage(`Error finding pickup location: ${error.message}. Check address format.`, "danger");
          map.setView([41.7151, 44.8271], 12);
        });
  }

  function fetchAndDisplayConciergeLocation() {
      if (locationApiUrl) {
          fetch(locationApiUrl)
              .then(response => {
                  if (!response.ok) {
                      if (response.status === 404 || response.status === 403) {
                          if (conciergeMarker) {
                              map.removeLayer(conciergeMarker);
                              conciergeMarker = null;
                          }
                          return Promise.reject("Location not available");
                      }
                      throw new Error(`HTTP error fetching concierge location! Status: ${response.status}`);
                  }
                  return response.json();
              })
              .then(data => {
                  const lat = parseFloat(data.lat);
                  const lon = parseFloat(data.lng);

                  if (!isNaN(lat) && !isNaN(lon)) {
                      if (conciergeMarker) {
                          conciergeMarker.setLatLng([lat, lon]);
                      } else {
                          conciergeMarker = L.marker([lat, lon], {
                              icon: L.icon({
                                  iconUrl: "{% static 'images/marker-icon-red.png' %}",
                                  iconSize: [25, 41],
                                  iconAnchor: [12, 41],
                                  popupAnchor: [1, -34],
                                  shadowUrl: "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
                                  shadowSize: [41, 41],
                                  shadowAnchor: [12, 41]
                              })
                          })
                          .addTo(map)
                          .bindPopup(`<b>${assignedToName}'s Location</b>`);
                      }
                      fitMapToMarkers();
                      updateMapMessage("", "info");
                  }
              })
              .catch(error => {
                  updateMapMessage(`Error fetching concierge location: ${error.message}`, "warning");
              });
      } else {
          if (conciergeMarker) {
               map.removeLayer(conciergeMarker);
               conciergeMarker = null;
          }
          updateMapMessage("Concierge location updates are not available for this request.", "info");
      }
  }

  // --- Dealer marker logic ---
  function geocodeAndDisplayDealerLocation(address, name) {
      if (!address) return;
      updateMapMessage("Finding dealer location...", "info");
      const geocodingAddress = formatAddress(address);
      fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(geocodingAddress)}&limit=1`)
        .then(response => response.json())
        .then(data => {
          if (data && data.length > 0) {
            const lat = parseFloat(data[0].lat);
            const lon = parseFloat(data[0].lon);
            if (!isNaN(lat) && !isNaN(lon)) {
              if (dealerMarker) {
                  map.removeLayer(dealerMarker);
              }
              dealerMarker = L.marker([lat, lon], {
                  icon: L.icon({
                      iconUrl: "{% static 'images/marker-icon-green.png' %}",
                      iconSize: [25, 41],
                      iconAnchor: [12, 41],
                      popupAnchor: [1, -34],
                      shadowUrl: "https://unpkg.com/leaflet@1.9.4/dist/images/marker-shadow.png",
                      shadowSize: [41, 41],
                      shadowAnchor: [12, 41]
                  })
              })
              .addTo(map)
              .bindPopup(`<b>Dealer:</b> ${name || 'Dealer'}<br>${address.replace(/\\u000A/g, '<br>')}`);
              fitMapToMarkers();
              updateMapMessage("", "info");
            }
          }
        })
        .catch(error => {
          updateMapMessage(`Error finding dealer location: ${error.message}`, "danger");
        });
  }
  // --- End dealer marker logic ---

  // Initialize map and display the pickup location
  requestAnimationFrame(() => {
    if (mapEl.offsetParent !== null) {
        map.invalidateSize();
    }
    setTimeout(() => {
        geocodeAndDisplayPickupLocation(pickupAddress);
        fetchAndDisplayConciergeLocation();
        // --- Add dealer marker if address is present ---
        if (dealerAddress) {
            geocodeAndDisplayDealerLocation(dealerAddress, dealerName);
        }
    }, 250);
  });

  if (locationApiUrl) {
     const pollingInterval = setInterval(fetchAndDisplayConciergeLocation, 15000);
     window.addEventListener('beforeunload', function() {
         clearInterval(pollingInterval);
     });
  }

  // Warn concierge if page loses focus (live tracking will pause)
  {% if request.user.role == 'concierge' and service_request.assigned_to and service_request.assigned_to.id == request.user.id and service_request.status == 'Delivery' %}
  document.addEventListener('visibilitychange', function() {
      if (document.hidden) {
          alert("Live tracking will pause if you leave this page or your phone locks.");
      }
  });
  {% endif %}
});
</script>

